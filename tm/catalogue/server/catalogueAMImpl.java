package xxgam.oracle.apps.xbol.tm.catalogue.server;


import java.sql.SQLException;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.OAViewObject;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.jbo.Row;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;

import xxgam.oracle.apps.xbol.tm.InvoiceAs.server.MasterFreightVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class catalogueAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public catalogueAMImpl() {
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("xxgam.oracle.apps.xbol.tm.catalogue.server", /* package name */
      "catalogueAMLocal" /* Configuration Name */);
    }


    /**Custom methods*/
    
    /**Origen destino*/
     public void createRecordOD()
              {
                System.out.println("Creando Registro");
                OAViewObject vo = (OAViewObject)getOriDestVO1();
                OADBTransaction oADBTransaction = this.getOADBTransaction();
                System.out.println("get oadb transaction");
                oracle.jbo.domain.Number IdOriDest = oADBTransaction.getSequenceValue("XXGAM_TM_ORIDEST_S");
               
                if (!vo.isPreparedForExecution()) 
                { 
                System.out.println("!vo.isPreparedForExecution()");
                vo.executeQuery();}
               
                Row row = vo.createRow();
                row.setNewRowState(Row.STATUS_NEW);
                vo.insertRow(row);
                vo.setCurrentRow(row);
              //row.setNewRowState(Row.STATUS_INITIALIZED);  
                row.setAttribute("OridestId",IdOriDest);
                   
                // getOADBTransaction().commit(); 
                getOADBTransaction().postChanges();
                System.out.println("Permitiendo modificaciones al registro");
            
                ViewCriteria vc = vo.createViewCriteria();
                ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
                vcr1.setAttribute("OridestId",IdOriDest);     
                  vc.add(vcr1);
                  vo.applyViewCriteria(vc);

                  vo.executeQuery();
                  System.out.println(vo.getQuery());
                
                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        OriDestVORowImpl oriDestVORowImpl = (OriDestVORowImpl)rowSetIterator.next();
                       if (oriDestVORowImpl.getOridestId().equals(IdOriDest)){
                           oriDestVORowImpl.setIsRecordEnabled(false);
                           oriDestVORowImpl.setIsRecordEnabled2(false);
                           oriDestVORowImpl.setIsRecordEnabled3(false);
                           oriDestVORowImpl.setIsRecordEnabled4(true);
                           
 
                       } else{
                           oriDestVORowImpl.setIsRecordEnabled(true);
                           oriDestVORowImpl.setIsRecordEnabled2(true);
                       }
                      }
                
              } 
    
    
    
public void filterOD(     String  StringLocation
                        , String  StringState
                        , String  StringCountry
                        , oracle.jbo.domain.Date loadDate
                        ){
             
             
  oracle.jbo.domain.Date loadDate2 = null;
       
  System.out.println("catalogueAMImpl Entro a filterOD");
  
  OriDestVOImpl oriDestVOImpl = getOriDestVO1();         
  ViewCriteria vc = oriDestVOImpl.createViewCriteria();
  ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
  ViewCriteriaRow vcr2 = vc.createViewCriteriaRow();
  ViewCriteriaRow vcr3 = vc.createViewCriteriaRow();

 
      if (StringLocation != null){
        System.out.println("catalogueAMImpl ubicacion no nulo");
        vcr1.setAttribute("Description",StringLocation);}     

     if (StringState != null){
       System.out.println("catalogueAMImpl estado no nulo");
       vcr2.setAttribute("StateDescription",StringState);}   
       
     if (StringCountry != null){
       System.out.println("catalogueAMImpl pais no nulo");
       vcr3.setAttribute("CountryDescription",StringCountry);}          

     vc.add(vcr1);
     vc.add(vcr2);
     vc.add(vcr3);
  
  oriDestVOImpl.applyViewCriteria(vc);
 
    if (loadDate ==null ){
    loadDate2 = new oracle.jbo.domain.Date("0001-01-01");
 }

else  oriDestVOImpl.setWhereClause("load_date =  fnd_date.canonical_to_date('"+ loadDate2 +"') ");

     System.out.println(oriDestVOImpl.getQuery());
     oriDestVOImpl.executeQuery();


     RowSetIterator rowSetIterator = oriDestVOImpl.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
              OriDestVORowImpl oriDestVORowImpl = (OriDestVORowImpl)rowSetIterator.next();
              oriDestVORowImpl.setIsRecordEnabled(true);
              oriDestVORowImpl.setIsRecordEnabled2(true);
              oriDestVORowImpl.setIsRecordEnabled4(false);

              System.out.println(oriDestVORowImpl.getDescription());
              System.out.println(oriDestVORowImpl.getIsRecordEnabled());

         }

  System.out.println("Executed query");  
 }  
    
    
public void SaveOD(){
        
        getOADBTransaction().commit();
        
        OAViewObject vo = (OAViewObject)getOriDestVO1();
        vo.executeQuery();
        
        RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
        while (rowSetIterator.hasNext()) {
              OriDestVORowImpl oriDestVORowImpl = (OriDestVORowImpl)rowSetIterator.next();
              
              oriDestVORowImpl.setIsRecordEnabled(true);
              oriDestVORowImpl.setIsRecordEnabled3(true);
              oriDestVORowImpl.setIsRecordEnabled4(false);

              }           
    }


 public void CancelOD(){   
     OAViewObject vo = (OAViewObject)getOriDestVO1();
     vo.executeQuery();
     RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
           OriDestVORowImpl oriDestVORowImpl = (OriDestVORowImpl)rowSetIterator.next();
           oriDestVORowImpl.setIsRecordEnabled(true);
               oriDestVORowImpl.setIsRecordEnabled2(true);
               oriDestVORowImpl.setIsRecordEnabled3(true);          
           oriDestVORowImpl.setIsRecordEnabled4(false);

           }  
     getOADBTransaction().rollback();

 }


    public void filterODini(){
                          
      System.out.println("catalogueAMImpl Entro a filterOD ini");
      
      OriDestVOImpl oriDestVOImpl = getOriDestVO1();         
     
      System.out.println(oriDestVOImpl.getQuery());
         oriDestVOImpl.setWhereClause(null);
      oriDestVOImpl.executeQuery();
     
     
       RowSetIterator rowSetIterator = oriDestVOImpl.createRowSetIterator(null); 
         while (rowSetIterator.hasNext()) {
                  OriDestVORowImpl oriDestVORowImpl = (OriDestVORowImpl)rowSetIterator.next();
                  oriDestVORowImpl.setIsRecordEnabled(true);
                  oriDestVORowImpl.setIsRecordEnabled2(true);
                 oriDestVORowImpl.setIsRecordEnabled3(true);
                  oriDestVORowImpl.setIsRecordEnabled4(false);

                  System.out.println(oriDestVORowImpl.getDescription());
                  System.out.println(oriDestVORowImpl.getIsRecordEnabled());
             }

      System.out.println("Executed query");  
     }

    public void deleteRecordOD(String OridestId)
                {
                  System.out.println("Borrar Registro");
                 
                 System.out.println("OridestId: "+ OridestId );
                 OAViewObject vo = (OAViewObject)getOriDestVO1();
                  
                  if (!vo.isPreparedForExecution()) 
                  { System.out.println("!vo.isPreparedForExecution()");
                        vo.executeQuery(); 
                  }
                 
                    vo.setWhereClause("ORIDEST_ID="+ OridestId);
                    System.out.println("search query - " + vo.getQuery());
                    vo.executeQuery();
                    while (vo.hasNext()) {
                          vo.next();
                          vo.removeCurrentRow();
                          System.out.println("columna eliminada");
                        }
                        
                  System.out.println("Registro Borrado");

                }    
                
        public void updateRecordOD(String OridestId){
                
                System.out.println("Actualizando Registro");
                
                System.out.println("OridestId: "+ OridestId );
                OAViewObject vo = (OAViewObject)getOriDestVO1();
                
                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        OriDestVORowImpl oriDestVORow = (OriDestVORowImpl)rowSetIterator.next();
                       if (oriDestVORow.getOridestId().equals(OridestId)){
                           oriDestVORow.setIsRecordEnabled(false);
                           oriDestVORow.setIsRecordEnabled2(false);
                           oriDestVORow.setIsRecordEnabled3(false);
                           oriDestVORow.setIsRecordEnabled4(true);

                       }
                      }

            }

/**Shippers*/

 public void createRecordS()
          {
            System.out.println("Creando Registro Shipper");
            OAViewObject vo = (OAViewObject)getShippersVO1();
            OADBTransaction oADBTransaction = this.getOADBTransaction();
            oracle.jbo.domain.Number IdShipper = oADBTransaction.getSequenceValue("XXGAM_TM_SHIPPERS_S");
           
            if (!vo.isPreparedForExecution()) 
            { 
            System.out.println("!vo.isPreparedForExecution()");
            vo.executeQuery();}
           
            Row row = vo.createRow();
            row.setNewRowState(Row.STATUS_NEW);
            vo.insertRow(row);
            vo.setCurrentRow(row);
          //row.setNewRowState(Row.STATUS_INITIALIZED);  
            row.setAttribute("ShipperId",IdShipper);
               
            // getOADBTransaction().commit(); 
            getOADBTransaction().postChanges();
            System.out.println("Permitiendo modificaciones al registro");
        
            ViewCriteria vc = vo.createViewCriteria();
            ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
            vcr1.setAttribute("ShipperId",IdShipper);     
              vc.add(vcr1);
              vo.applyViewCriteria(vc);

              vo.executeQuery();
              System.out.println(vo.getQuery());
            
              RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
              while (rowSetIterator.hasNext()) {
                    ShippersVORowImpl shippersVORowImpl = (ShippersVORowImpl)rowSetIterator.next();
                   if (shippersVORowImpl.getShipperId().equals(IdShipper)){
                       shippersVORowImpl.setIsRecordEnabled(false);
                       shippersVORowImpl.setIsRecordEnabled2(false);
                       shippersVORowImpl.setIsRecordEnabled3(false);
                       shippersVORowImpl.setIsRecordEnabled4(true);
                       
 
                   } else{
                       shippersVORowImpl.setIsRecordEnabled(true);
                       shippersVORowImpl.setIsRecordEnabled2(true);
                   }
                  }
            
          } 
 
 
 
 public void filterS(      String  StringCode
                    , String  StringShipper
                    ){
                
 System.out.println("catalogueAMImpl Entro a filterS");
 
 ShippersVOImpl shipperVOImpl = getShippersVO1();
 ViewCriteria vc = shipperVOImpl.createViewCriteria();
 ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
 ViewCriteriaRow vcr2 = vc.createViewCriteriaRow();

 
  if (StringCode != null){
    System.out.println("catalogueAMImpl codigo no nulo");
    vcr1.setAttribute("Code",StringCode);}     

 if (StringShipper != null){
   System.out.println("catalogueAMImpl shipper no nulo");
   vcr2.setAttribute("Shipper",StringShipper);}   
   
  

 vc.add(vcr1);
 vc.add(vcr2);
 
 shipperVOImpl.applyViewCriteria(vc);

 System.out.println(shipperVOImpl.getQuery());
 shipperVOImpl.executeQuery();


 RowSetIterator rowSetIterator = shipperVOImpl.createRowSetIterator(null); 
 while (rowSetIterator.hasNext()) {
          ShippersVORowImpl shippersVORowImpl = (ShippersVORowImpl)rowSetIterator.next();
          shippersVORowImpl.setIsRecordEnabled(true);
          shippersVORowImpl.setIsRecordEnabled2(true);
          shippersVORowImpl.setIsRecordEnabled4(false);

          System.out.println(shippersVORowImpl.getIsRecordEnabled());

     }

 System.out.println("Executed query");
 }
 
 
 public void SaveS(){
    
    getOADBTransaction().commit();
    
              ShippersVOImpl vo = getShippersVO1();         

    vo.executeQuery();
    
    RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
    while (rowSetIterator.hasNext()) {
          ShippersVORowImpl shippersVORow = (ShippersVORowImpl)rowSetIterator.next();
          
          shippersVORow.setIsRecordEnabled(true);
          shippersVORow.setIsRecordEnabled3(true);
          shippersVORow.setIsRecordEnabled4(false);

          }           
 }


 public void CancelS(){
 //  OAViewObject vo = (OAViewObject)getOriDestVO1();
              ShippersVOImpl vo = getShippersVO1();         

     vo.executeQuery();
 RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
 while (rowSetIterator.hasNext()) {
       ShippersVORowImpl shippersVORow = (ShippersVORowImpl)rowSetIterator.next();
       shippersVORow.setIsRecordEnabled(true);
           shippersVORow.setIsRecordEnabled2(true);
           shippersVORow.setIsRecordEnabled3(true);
       shippersVORow.setIsRecordEnabled4(false);

       }  
 getOADBTransaction().rollback();

 }


 public void filterSini(){
                      
  System.out.println("catalogueAMImpl Entro a filterS ini");
  
                      ShippersVOImpl shipperVOImpl = getShippersVO1();         

  System.out.println(shipperVOImpl.getQuery());
     shipperVOImpl.setWhereClause(null);
  shipperVOImpl.executeQuery();
 
 
   RowSetIterator rowSetIterator = shipperVOImpl.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
              ShippersVORowImpl shippersVORowImpl = (ShippersVORowImpl)rowSetIterator.next();
              shippersVORowImpl.setIsRecordEnabled(true);
              shippersVORowImpl.setIsRecordEnabled2(true);
             shippersVORowImpl.setIsRecordEnabled3(true);
              shippersVORowImpl.setIsRecordEnabled4(false);

              System.out.println(shippersVORowImpl.getIsRecordEnabled());
         }

  System.out.println("Executed query");  
 }

 public void deleteRecordS(String ShipperId)
            {
              System.out.println("Borrar Registro");
             
             System.out.println("ShipperId: "+ ShipperId );
             //OAViewObject vo = (OAViewObject)getOriDestVO1();
             ShippersVOImpl vo = getShippersVO1();         

              if (!vo.isPreparedForExecution()) 
              { System.out.println("!vo.isPreparedForExecution()");
                    vo.executeQuery(); 
              }
             
                vo.setWhereClause("SHIPPER_ID = "+ ShipperId);
                System.out.println("search query - " + vo.getQuery());
                vo.executeQuery();
                while (vo.hasNext()) {
                      vo.next();
                      vo.removeCurrentRow();
                      System.out.println("columna eliminada");
                    }
                    
              System.out.println("Registro Borrado");

            }    
            
    public void updateRecordS(String ShipperId){
            
            System.out.println("Actualizando Registro");
            
            System.out.println("ShipperId: "+ ShipperId );
           // OAViewObject vo = (OAViewObject)getOriDestVO1();
                                      ShippersVOImpl vo = getShippersVO1();         

              RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
              while (rowSetIterator.hasNext()) {
                    ShippersVORowImpl oriDestVORow = (ShippersVORowImpl)rowSetIterator.next();
                   if (oriDestVORow.getShipperId().equals(ShipperId)){
                       oriDestVORow.setIsRecordEnabled(false);
                       oriDestVORow.setIsRecordEnabled2(false);
                       oriDestVORow.setIsRecordEnabled3(false);
                       oriDestVORow.setIsRecordEnabled4(true);

                   }
                  }

        }
        
    /**KM*/

     public void createRecordKm()
              {
                System.out.println("Creando Registro Km");
                OAViewObject vo = (OAViewObject)getKilometersVO1();
                OADBTransaction oADBTransaction = this.getOADBTransaction();
                oracle.jbo.domain.Number IdKM = oADBTransaction.getSequenceValue("XXGAM_TM_KILOMETERS_S");
               
                if (!vo.isPreparedForExecution()) 
                { 
                System.out.println("!vo.isPreparedForExecution()");
                vo.executeQuery();}
               
                Row row = vo.createRow();
                row.setNewRowState(Row.STATUS_NEW);
                vo.insertRow(row);
                vo.setCurrentRow(row);
              //row.setNewRowState(Row.STATUS_INITIALIZED);  
                row.setAttribute("KmId",IdKM);
                   
                // getOADBTransaction().commit(); 
                getOADBTransaction().postChanges();
                System.out.println("Permitiendo modificaciones al registro");
            
                ViewCriteria vc = vo.createViewCriteria();
                ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
                vcr1.setAttribute("KmId",IdKM);     
                  vc.add(vcr1);
                  vo.applyViewCriteria(vc);

                  vo.executeQuery();
                  System.out.println(vo.getQuery());
                
                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        KilometersVORowImpl kilometersVORowImp = (KilometersVORowImpl)rowSetIterator.next();
                       if (kilometersVORowImp.getKmId().equals(IdKM)){
                           kilometersVORowImp.setIsRecordEnabled(false);
                           kilometersVORowImp.setIsRecordEnabled2(false);
                           kilometersVORowImp.setIsRecordEnabled3(false);
                           kilometersVORowImp.setIsRecordEnabled4(true);
                           
     
                       } else{
                           kilometersVORowImp.setIsRecordEnabled(true);
                           kilometersVORowImp.setIsRecordEnabled2(true);
                       }
                      }
                
              } 
     
     
     
     public void filterKm(      String  StringOrigin
                        , String  StringDest
                        ){
                    
     System.out.println("catalogueAMImpl Entro a filterKm");
     
     KilometersVOImpl kilometersVOImpl = getKilometersVO1();
     ViewCriteria vc = kilometersVOImpl.createViewCriteria();
     ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
     ViewCriteriaRow vcr2 = vc.createViewCriteriaRow();

     
      if (StringOrigin != null){
        System.out.println("catalogueAMImpl origen no nulo");
        vcr1.setAttribute("DOrigin",StringOrigin);}     

     if (StringDest != null){
       System.out.println("catalogueAMImpl shipper no nulo");
       vcr2.setAttribute("DDestination",StringDest);}   
       
      

     vc.add(vcr1);
     vc.add(vcr2);
     
     kilometersVOImpl.applyViewCriteria(vc);

     System.out.println(kilometersVOImpl.getQuery());
     kilometersVOImpl.executeQuery();


     RowSetIterator rowSetIterator = kilometersVOImpl.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
              KilometersVORowImpl kilometersVORowImp = (KilometersVORowImpl)rowSetIterator.next();
              kilometersVORowImp.setIsRecordEnabled(true);
              kilometersVORowImp.setIsRecordEnabled2(true);
             kilometersVORowImp.setIsRecordEnabled3(true);
              kilometersVORowImp.setIsRecordEnabled4(false);

              System.out.println(kilometersVORowImp.getIsRecordEnabled());

         }

     System.out.println("Executed query");
     }
     
     
     public void SaveKm(){
        
        getOADBTransaction().commit();
        
                  KilometersVOImpl vo = getKilometersVO1();         

        vo.executeQuery();
        
        RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
        while (rowSetIterator.hasNext()) {
              KilometersVORowImpl kilometersVORowImp = (KilometersVORowImpl)rowSetIterator.next();
              
              kilometersVORowImp.setIsRecordEnabled(true);
              kilometersVORowImp.setIsRecordEnabled3(true);
              kilometersVORowImp.setIsRecordEnabled4(false);

              }           
     }


     public void CancelKm(){

     KilometersVOImpl vo = getKilometersVO1();         

         vo.executeQuery();
     RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
           KilometersVORowImpl kilometersVORowImp = (KilometersVORowImpl)rowSetIterator.next();
           kilometersVORowImp.setIsRecordEnabled(true);
               kilometersVORowImp.setIsRecordEnabled2(true);
               kilometersVORowImp.setIsRecordEnabled3(true);
           kilometersVORowImp.setIsRecordEnabled4(false);

           }  
     getOADBTransaction().rollback();

     }


     public void filterKmini(){
                          
      System.out.println("catalogueAMImpl Entro a filterKm ini");
      
                          KilometersVOImpl kilometersVOImpl = getKilometersVO1();         

      System.out.println(kilometersVOImpl.getQuery());
         kilometersVOImpl.setWhereClause(null);
      kilometersVOImpl.executeQuery();
     
     
       RowSetIterator rowSetIterator = kilometersVOImpl.createRowSetIterator(null); 
         while (rowSetIterator.hasNext()) {
                  KilometersVORowImpl kilometersVORowImp = (KilometersVORowImpl)rowSetIterator.next();
                  kilometersVORowImp.setIsRecordEnabled(true);
                  kilometersVORowImp.setIsRecordEnabled2(true);
                 kilometersVORowImp.setIsRecordEnabled3(true);
                  kilometersVORowImp.setIsRecordEnabled4(false);

                  System.out.println(kilometersVORowImp.getIsRecordEnabled());
             }

      System.out.println("Executed query");  
     }

     public void deleteRecordKm(String KmId)
                {
                  System.out.println("Borrar Registro");
                 
                 System.out.println("KmId: "+ KmId );
                 //OAViewObject vo = (OAViewObject)getOriDestVO1();
                 KilometersVOImpl vo = getKilometersVO1();         

                  if (!vo.isPreparedForExecution()) 
                  { System.out.println("!vo.isPreparedForExecution()");
                        vo.executeQuery(); 
                  }
                 
                    vo.setWhereClause("KM_ID = "+ KmId);
                    System.out.println("search query - " + vo.getQuery());
                    vo.executeQuery();
                    while (vo.hasNext()) {
                          vo.next();
                          vo.removeCurrentRow();
                          System.out.println("columna eliminada");
                        }
                        
                  System.out.println("Registro Borrado");

                }    
                
        public void updateRecordKm(String KmId){
                
                System.out.println("Actualizando Registro");
                
                System.out.println("KmId: "+ KmId );
               // OAViewObject vo = (OAViewObject)getOriDestVO1();
                                          KilometersVOImpl vo = getKilometersVO1();         

                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        KilometersVORowImpl oriDestVORow = (KilometersVORowImpl)rowSetIterator.next();
                       if (oriDestVORow.getKmId().equals(KmId)){
                           oriDestVORow.setIsRecordEnabled(false);
                           oriDestVORow.setIsRecordEnabled2(false);
                           oriDestVORow.setIsRecordEnabled3(false);
                           oriDestVORow.setIsRecordEnabled4(true);

                       }
                      }

            }
            
    /**Simp*/

     public void createRecordSimp()
              {
                System.out.println("Creando Registro Sim");
                OAViewObject vo = (OAViewObject)getSimplificationVO1();
                OADBTransaction oADBTransaction = this.getOADBTransaction();
                oracle.jbo.domain.Number IdSimp = oADBTransaction.getSequenceValue("XXGAM_TM_SIMPLIFICATION_S");
               
                if (!vo.isPreparedForExecution()) 
                { 
                System.out.println("!vo.isPreparedForExecution()");
                vo.executeQuery();}
               
                Row row = vo.createRow();
                row.setNewRowState(Row.STATUS_NEW);
                vo.insertRow(row);
                vo.setCurrentRow(row);
              //row.setNewRowState(Row.STATUS_INITIALIZED);  
                row.setAttribute("SimpId",IdSimp);
                   
                // getOADBTransaction().commit(); 
                getOADBTransaction().postChanges();
                System.out.println("Permitiendo modificaciones al registro");
            
                ViewCriteria vc = vo.createViewCriteria();
                ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();
                vcr1.setAttribute("SimpId",IdSimp);     
                  vc.add(vcr1);
                  vo.applyViewCriteria(vc);

                  vo.executeQuery();
                  System.out.println(vo.getQuery());
                
                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        SimplificationVORowImpl simplificationVORowImpl = (SimplificationVORowImpl)rowSetIterator.next();
                       if (simplificationVORowImpl.getSimpId().equals(IdSimp)){
                           simplificationVORowImpl.setIsRecordEnabled(false);
                           simplificationVORowImpl.setIsRecordEnabled2(false);
                           simplificationVORowImpl.setIsRecordEnabled3(false);
                           simplificationVORowImpl.setIsRecordEnabled4(true);
                           
     
                       } else{
                           simplificationVORowImpl.setIsRecordEnabled(true);
                           simplificationVORowImpl.setIsRecordEnabled2(true);
                       }
                      }
                
              } 
     
     
     
     public void filterSimp(      String  StringOriDest
                        ){
                    
     System.out.println("catalogueAMImpl Entro a filterKm");
     
     SimplificationVOImpl simplificationVOImpl = getSimplificationVO1();
     ViewCriteria vc = simplificationVOImpl.createViewCriteria();
     ViewCriteriaRow vcr1 = vc.createViewCriteriaRow();

     
      if (StringOriDest != null){
        System.out.println("catalogueAMImpl origen no nulo");
        vcr1.setAttribute("DOridest",StringOriDest);}     


       
      

     vc.add(vcr1);
     
     simplificationVOImpl.applyViewCriteria(vc);

     System.out.println(simplificationVOImpl.getQuery());
     simplificationVOImpl.executeQuery();


     RowSetIterator rowSetIterator = simplificationVOImpl.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
              SimplificationVORowImpl simplificationVORowImpl = (SimplificationVORowImpl)rowSetIterator.next();
              simplificationVORowImpl.setIsRecordEnabled(true);
              simplificationVORowImpl.setIsRecordEnabled2(true);
             simplificationVORowImpl.setIsRecordEnabled3(true);
              simplificationVORowImpl.setIsRecordEnabled4(false);

              System.out.println(simplificationVORowImpl.getIsRecordEnabled());

         }

     System.out.println("Executed query");
     }
     
     
     public void SaveSimp(){
        
        getOADBTransaction().commit();
        
                  SimplificationVOImpl vo = getSimplificationVO1();         

        vo.executeQuery();
        
        RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
        while (rowSetIterator.hasNext()) {
              SimplificationVORowImpl simplificationVORowImpl = (SimplificationVORowImpl)rowSetIterator.next();
              
              simplificationVORowImpl.setIsRecordEnabled(true);
              simplificationVORowImpl.setIsRecordEnabled3(true);
              simplificationVORowImpl.setIsRecordEnabled4(false);

              }           
     }


     public void CancelSimp(){

     SimplificationVOImpl vo = getSimplificationVO1();         

         vo.executeQuery();
     RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
     while (rowSetIterator.hasNext()) {
           SimplificationVORowImpl simplificationVORowImpl = (SimplificationVORowImpl)rowSetIterator.next();
           simplificationVORowImpl.setIsRecordEnabled(true);
               simplificationVORowImpl.setIsRecordEnabled2(true);
               simplificationVORowImpl.setIsRecordEnabled3(true);
           simplificationVORowImpl.setIsRecordEnabled4(false);

           }  
     getOADBTransaction().rollback();

     }


     public void filterSimpini(){
                          
      System.out.println("catalogueAMImpl Entro a filterSimp ini");
      
          SimplificationVOImpl simplificationVOImpl = getSimplificationVO1();         

      System.out.println(simplificationVOImpl.getQuery());
         simplificationVOImpl.setWhereClause(null);
      simplificationVOImpl.executeQuery();
     
     
       RowSetIterator rowSetIterator = simplificationVOImpl.createRowSetIterator(null); 
         while (rowSetIterator.hasNext()) {
                  SimplificationVORowImpl simplificationVORowImpl = (SimplificationVORowImpl)rowSetIterator.next();
                  simplificationVORowImpl.setIsRecordEnabled(true);
                  simplificationVORowImpl.setIsRecordEnabled2(true);
                 simplificationVORowImpl.setIsRecordEnabled3(true);
                  simplificationVORowImpl.setIsRecordEnabled4(false);

                  System.out.println(simplificationVORowImpl.getIsRecordEnabled());
             }

      System.out.println("Executed query");  
     }

     public void deleteRecordSimp(String SimpId)
                {
                  System.out.println("Borrar Registro");
                 
                 System.out.println("SimpId: "+ SimpId );
                 //OAViewObject vo = (OAViewObject)getOriDestVO1();
                 SimplificationVOImpl vo = getSimplificationVO1();         

                  if (!vo.isPreparedForExecution()) 
                  { System.out.println("!vo.isPreparedForExecution()");
                        vo.executeQuery(); 
                  }
                 
                    vo.setWhereClause("SIMP_ID = "+ SimpId);
                    System.out.println("search query - " + vo.getQuery());
                    vo.executeQuery();
                    while (vo.hasNext()) {
                          vo.next();
                          vo.removeCurrentRow();
                          System.out.println("columna eliminada");
                        }
                        
                  System.out.println("Registro Borrado");

                }    
                
        public void updateRecordSimp(String SimpId){
                
                System.out.println("Actualizando Registro");
                
                System.out.println("SimpId: "+ SimpId );
               // OAViewObject vo = (OAViewObject)getOriDestVO1();
                                SimplificationVOImpl vo = getSimplificationVO1();         

                  RowSetIterator rowSetIterator = vo.createRowSetIterator(null); 
                  while (rowSetIterator.hasNext()) {
                        SimplificationVORowImpl simplificationVORow = (SimplificationVORowImpl)rowSetIterator.next();
                       if (simplificationVORow.getSimpId().equals(SimpId)){
                           simplificationVORow.setIsRecordEnabled(false);
                           simplificationVORow.setIsRecordEnabled2(false);
                           simplificationVORow.setIsRecordEnabled3(false);
                           simplificationVORow.setIsRecordEnabled4(true);

                       }
                      }

                }

                    


    /**Container's getter for OriDestVO1
     */
    public OriDestVOImpl getOriDestVO1() {
        return (OriDestVOImpl)findViewObject("OriDestVO1");
    }

    /**Container's getter for ShippersVO1
     */
    public ShippersVOImpl getShippersVO1() {
        return (ShippersVOImpl)findViewObject("ShippersVO1");
    }

    /**Container's getter for KilometersVO1
     */
    public KilometersVOImpl getKilometersVO1() {
        return (KilometersVOImpl)findViewObject("KilometersVO1");
    }

    /**Container's getter for SimplificationVO1
     */
    public SimplificationVOImpl getSimplificationVO1() {
        return (SimplificationVOImpl)findViewObject("SimplificationVO1");
    }
}
