package xxgam.oracle.apps.xbol.tm.freight.server;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import java.sql.Types;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;

import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageStyledTextBean;
import oracle.apps.fnd.framework.webui.beans.message.OAMessageTextInputBean;

import oracle.jbo.Row;

import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.BlobDomain;

import oracle.jbo.server.ViewLinkImpl;

import oracle.jdbc.OracleCallableStatement;

/*import prakjumar.oracle.apps.fnd.fnduploaddemo.server.UploadFileVOImpl;
import prakjumar.oracle.apps.fnd.fnduploaddemo.server.UploadFileVORowImpl;*/

import xxgam.oracle.apps.xbol.tm.freight.schema.RequestEOImpl;
import xxgam.oracle.apps.xbol.tm.freight.server.RequestVOImpl;
import xxgam.oracle.apps.xbol.tm.freight.server.RequestVORowImpl;
import xxgam.oracle.apps.xbol.tm.freight.webui.RequestCO;
import xxgam.oracle.apps.xbol.tm.freight.server.MaterialMVOImpl;
/*import xxgam.oracle.apps.xbol.tm.freight.server.MaterialDVOImpl;*/

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RequestAMImpl extends OAApplicationModuleImpl
{
  /**This is the default constructor (do not remove)
   */
  public RequestAMImpl()
  {
  }

  /**Sample main for debugging Business Components code using the tester.
   */
  public static void main(String[] args)
  {
    launchTester("xxgam.oracle.apps.xbol.tm.freight.server", /* package name */
      "RequestAMLocal" /* Configuration Name */);
  }


  public oracle.jbo.domain.Number Key;  
  public float NM=1;
  public float TotalWeight=0;
  
  public void createRecord(String userId, String OperatingUnit)
  {
    System.out.println("Creando Registro");
    RequestVOImpl vo = getRequestVO1();
    OADBTransaction oADBTransaction = this.getOADBTransaction();
  
    try {
         System.out.println("Realizando Consulta");
         vo.setWhereClause(null);
         System.out.println("search query - " + vo.getQuery());
         vo.executeQuery();
        }
     catch(Exception e) {
     throw new OAException(e.getMessage(),OAException.ERROR);
     }
                  
    oracle.jbo.domain.Number IdRequestNum = oADBTransaction.getSequenceValue("XXGAM_TM_REQUESTS_S");
    System.out.println("Id: "+IdRequestNum); 
    Key = IdRequestNum;
    if (!vo.isPreparedForExecution()) 
    { 
      vo.executeQuery(); 
    }
    
    Row row = vo.createRow();       
    vo.insertRow(row);
    vo.setCurrentRow(row);
    
    row.setAttribute("IdRequest",IdRequestNum);
    System.out.println("IdRequest: "+row.getAttribute("IdRequest"));
    
    DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
    Date date = new Date();
    System.out.println(sdf.format(date));
    String s=(sdf.format(date));
    try
    {
      Date date2 = sdf.parse (s);
      java.sql.Date sqlDate = new java.sql.Date(date2.getTime());
      row.setAttribute("ActivationDate",sqlDate);
      row.setAttribute("IdStatus",1);
      row.setAttribute("Status","Abierto");
      //Inicia setteo relacionado con area
       RequestUserVOImpl voRU = getRequestUserVO1();
       System.out.println("USER_ID="+userId);
       voRU.setWhereClause("USER_ID="+userId);
       System.out.println("search query - " + voRU.getQuery());
       voRU.executeQuery();
       RowSetIterator rowSetIteratorArea = voRU.createRowSetIterator(null);
       while (rowSetIteratorArea.hasNext())
       {
         RequestUserVORowImpl RequestUserVORow = (RequestUserVORowImpl)rowSetIteratorArea.next();
         System.out.println(RequestUserVORow.getName());
       }
      //Termina setteo de area
      RowSetIterator rowSetIterator = vo.createRowSetIterator(null);
      while (rowSetIterator.hasNext())
      {
        RequestVORowImpl RequestVORow = (RequestVORowImpl)rowSetIterator.next();
        RequestVORow.setFreightEnabled(false);
      }
    } catch (ParseException pe)
    {
       pe.printStackTrace();
    }
    System.out.println("ActivationDate: "+row.getAttribute("ActivationDate"));
    row.setNewRowState(Row.STATUS_NEW);
    //getOADBTransaction().postChanges();
    //vo.setWhereClause("ID_REQUEST="+row.getAttribute("IdRequest"));
    //System.out.println("search query - " + vo.getQuery());    
    //vo.executeQuery();
  }
  
     public void createRecord2()
     {
       System.out.println("Creando Registro de MD");
       System.out.println("Key: "+Key);
       MaterialMVOImpl voM = getMaterialMVO1();
       OADBTransaction oADBTransaction = this.getOADBTransaction();
       if (!voM.isPreparedForExecution()) 
       { 
         voM.setWhereClause("ID_REQUEST="+Key);
         voM.executeQuery(); 
       }  
       /*try {
            voM.setWhereClause("ID_REQUEST="+pIdR);
            System.out.println("search query - " + voM.getQuery());
            voM.executeQuery();
            voD.setWhereClause(null);
            System.out.println("search query - " + voD.getQuery());
            voD.executeQuery();
           }
        catch(Exception e) {
        throw new OAException(e.getMessage(),OAException.ERROR);
        }     */ 
       System.out.println("Creando registro M");
       Row rowM = voM.createRow();       
       voM.insertRow(rowM);
       voM.setCurrentRow(rowM);       
       rowM.setAttribute("IdRequest",Key);
       rowM.setAttribute("IdMaterial",1);
       System.out.println("IdRequest M: "+rowM.getAttribute("IdRequest"));
       rowM.setNewRowState(Row.STATUS_NEW);
       //getOADBTransaction().postChanges();
     }  
  
       public void createMaterial(OAPageContext pageContext, OAWebBean webBean)
        {
          System.out.println("Agregando Material");
          System.out.println("pIdR: "+Key);
          NM = NM +1;
          int IdMat = 0;
          IdMat = (int)NM;
          System.out.println("pIdM: "+NM);
          MaterialMVOImpl voM = getMaterialMVO1();
          OADBTransaction oADBTransaction = this.getOADBTransaction();
          try {
               voM.setWhereClause("ID_REQUEST="+Key);
               System.out.println("search query - " + voM.getQuery());
               voM.executeQuery();
              }
           catch(Exception e) {
           throw new OAException(e.getMessage(),OAException.ERROR);
           }    
          Row rowM = voM.createRow();       
          voM.insertRow(rowM);
          voM.setCurrentRow(rowM);       
          rowM.setAttribute("IdRequest",Key);
          rowM.setAttribute("IdMaterial",NM);
          System.out.println("IdRequest M: "+rowM.getAttribute("IdRequest"));
          rowM.setNewRowState(Row.STATUS_NEW);
          //getOADBTransaction().commit();
          save(pageContext, webBean);
          voM.setWhereClause("ID_REQUEST="+Key);
          voM.executeQuery();
          //getOADBTransaction().postChanges();
        }
  
  public Number saveFile(String Name)
  {
    OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
    String strErrmsg;
    String strErrcod;
    Number retId;
    String retval;
    String strStmt =" BEGIN" +
                         " APPS.XXGAM_TM_FILES_PKG.GET_FILE( pso_errmsg  => :1" +
                         "                , pso_errcod  => :2" +
                         "                , pso_id  => :3" +
                         "                , psi_file_name   => :4" +
                         "                ); " +
                         " END; " ;
        
    OracleCallableStatement oraclecallablestatement =  (OracleCallableStatement)oadbtransaction.createCallableStatement(strStmt, 1);
    try
    {
      oraclecallablestatement.registerOutParameter(1,Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(2,Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3,Types.INTEGER);
      oraclecallablestatement.setString(4,new String(Name));                         
      oraclecallablestatement.execute();     
      strErrmsg = oraclecallablestatement.getString(1);
      strErrcod = oraclecallablestatement.getString(2);     
      retId = oraclecallablestatement.getInt(3);
      System.out.println("strErrmsg: "+strErrmsg);
      System.out.println("strErrcod: "+strErrcod);
      System.out.println("retId: "+retId);      
      return retId;
    } 
    catch (SQLException sqle)
    {
        retval = "EXCEPTION "+sqle.getErrorCode()+" , "+sqle.getMessage();
        throw new OAException(retval,OAException.ERROR); 
    }
    
  }
  
  public BlobDomain consultaBlob(String pIdT)
  {
    String FileName = null;
    BlobDomain BlobFile = null;
    int IdT = Integer.parseInt(pIdT);
    try
    {
      DownloadVOImpl vo = getDownloadVO1();
      vo.setMaxFetchSize(-1);
      vo.setWhereClauseParams(null);
      vo.setWhereClause("FILE_ID = "+IdT);
      System.out.println("search query - " + vo.getQuery());
      vo.executeQuery();
      DownloadVORowImpl row = (DownloadVORowImpl)vo.first(); 
      FileName = row.getFileName();
      BlobFile = row.getFileData();
      System.out.println("Blob File: "+BlobFile);
      return BlobFile;
    }
    catch(Exception e) 
    {
     throw new OAException(e.getMessage(),OAException.ERROR);
    }
  }
  
  public String consultaName(String pIdT)
  {
    String FileName = null;
    BlobDomain BlobFile = null;
    int IdT = Integer.parseInt(pIdT);
    try
    {
      DownloadVOImpl vo = getDownloadVO1();
      vo.setMaxFetchSize(-1);
      vo.setWhereClauseParams(null);
      vo.setWhereClause("FILE_ID = "+IdT);
      System.out.println("search query - " + vo.getQuery());
      vo.executeQuery();
      DownloadVORowImpl row = (DownloadVORowImpl)vo.first(); 
      FileName = row.getFileName();
      BlobFile = row.getFileData();
      System.out.println("Blob File: "+BlobFile);
      return FileName;
    }
    catch(Exception e) 
    {
     throw new OAException(e.getMessage(),OAException.ERROR);
    }
  }

  public void save(OAPageContext pageContext, OAWebBean webBean)
  {
    MaterialMVOImpl voM = getMaterialMVO1();
    MaterialMVORowImpl RowM = null;
    RequestVOImpl voR = getRequestVO1();
    RequestVORowImpl RowR = null;
    RowSetIterator rowSetIterator = voR.createRowSetIterator(null);
    while (rowSetIterator.hasNext())
    {
      RequestVORowImpl RequestVORow = (RequestVORowImpl)rowSetIterator.next();
      RequestVORow.setFreightEnabled(true);
    }
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    getOADBTransaction().commit();
    voM.setWhereClause("ID_REQUEST="+Key);
    voM.executeQuery();
    voR.setWhereClause("ID_REQUEST="+Key);
    voR.executeQuery();
    oracle.jbo.domain.Number TW = new oracle.jbo.domain.Number(0);
    for(RowM=(MaterialMVORowImpl)voM.first();null!=RowM;RowM=(MaterialMVORowImpl)voM.next())
    {
      oracle.jbo.domain.Number TWR = new oracle.jbo.domain.Number(0);
      System.out.println(RowM.getIdMaterial());
      System.out.println(RowM.getWeight());
      System.out.println(RowM.getUnitsNumber());
      if (null!=RowM.getWeight() && null!=RowM.getUnitsNumber())
      {
        TWR = RowM.getWeight().multiply(RowM.getUnitsNumber());
        TW = TW.add(TWR);
      }
      System.out.println("Peso total "+RowM.getIdMaterial()+"= "+TWR);  
      System.out.println("Peso total ="+TW);
      RowM.setAttribute("TotalWeight", TWR);
      OAMessageStyledTextBean PT = (OAMessageStyledTextBean)webBean.findChildRecursive("TotalWeight");
      PT.setValue(pageContext,TW);
    }
    getOADBTransaction().commit();
    voM.setWhereClause("ID_REQUEST="+Key);
    voM.executeQuery();
    RowSetIterator rowSetIterator2 = voM.createRowSetIterator(null);
    while (rowSetIterator2.hasNext())
    {
      MaterialMVORowImpl MaterialMVORow = (MaterialMVORowImpl)rowSetIterator2.next();
      voM.setCurrentRow(MaterialMVORow);
    }
    voR.setWhereClause("ID_REQUEST="+Key);
    voR.executeQuery();
  }
  
  
  public void deleteRequest()
  {
    OADBTransaction oADBTransaction = this.getOADBTransaction();
    getOADBTransaction().rollback();
    RequestVOImpl voR = getRequestVO1();
    MaterialMVOImpl voM = getMaterialMVO1();
    Connection connection = oADBTransaction.getJdbcConnection();
    String strPrepStmt = " DELETE FROM BOLINF.XXGAM_TM_REQUESTS_T WHERE ID_REQUEST=?";  
    PreparedStatement prepStmt;
    String strPrepStmt2 = " DELETE FROM BOLINF.XXGAM_TM_MATERIAL_MT WHERE ID_REQUEST=?";  
    PreparedStatement prepStmt2;
    try {
          prepStmt = connection.prepareStatement(strPrepStmt);
          String KeyStr = Key.toString();          
          prepStmt.setString(1, KeyStr);
          prepStmt.execute();
          System.out.println(strPrepStmt);
          oADBTransaction.commit();
          if(prepStmt!=null){
              prepStmt.close();
           }
          prepStmt2 = connection.prepareStatement(strPrepStmt2);
          prepStmt2.setString(1, KeyStr);
          prepStmt2.execute();
          System.out.println(strPrepStmt2);
          oADBTransaction.commit();
          if(prepStmt2!=null){
              prepStmt2.close();
           }
           throw new OAException("Se borra exitosamente el registro con id: "+Key,OAException.CONFIRMATION);
          } catch (SQLException e) {
               throw new OAException("No se registra cambio para registro con id: "+Key,OAException.ERROR);
          }
  }

  /**Container's getter for DownloadVO1
   */
  public DownloadVOImpl getDownloadVO1()
  {
    return (DownloadVOImpl)findViewObject("DownloadVO1");
  }


  /**Container's getter for MaterialMVO1
   */
  public MaterialMVOImpl getMaterialMVO1()
  {
    return (MaterialMVOImpl)findViewObject("MaterialMVO1");
  }

  /**Container's getter for RequestVO1
   */
  public RequestVOImpl getRequestVO1()
  {
    return (RequestVOImpl)findViewObject("RequestVO1");
  }

  /**Container's getter for RequestUserVO1
   */
  public RequestUserVOImpl getRequestUserVO1()
  {
    return (RequestUserVOImpl)findViewObject("RequestUserVO1");
  }
}

